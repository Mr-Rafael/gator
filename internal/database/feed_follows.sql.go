// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted AS (
    INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
    VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    )
    RETURNING id, user_id, feed_id
)
SELECT i.id, i.user_id, feed_id, users.id, users.created_at, users.updated_at, users.name, feeds.id, feeds.name, url, feeds.user_id, feeds.created_at, feeds.updated_at
FROM inserted i
INNER JOIN users
    ON i.user_id = users.id
INNER JOIN feeds
    ON i.feed_id = feeds.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	FeedID      uuid.UUID
	ID_2        uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	ID_3        uuid.UUID
	Name_2      string
	Url         string
	UserID_2    uuid.UUID
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.ID_2,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ID_3,
		&i.Name_2,
		&i.Url,
		&i.UserID_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}
